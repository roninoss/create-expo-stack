<% if (props.stylingPackage?.name === "nativewind") { %>
  import '../global.css';
<% } else if (props.stylingPackage?.name === "nativewinui") { %>
  import '../global.css';
  import 'expo-dev-client';
<% } %>
<% if (props.stylingPackage?.name === "unistyles") { %>
import '../unistyles';
<% } %>
<% if (props.internalizationPackage?.name === "i18next") { %>
  import '../translation';
<% } %>

<% if (props.authenticationPackage?.name === "clerk") { %>
  import * as SecureStore from 'expo-secure-store'
  import { ClerkLoaded, ClerkProvider } from '@clerk/clerk-expo';
<% } %>
<% if (props.stylingPackage?.name === "tamagui") { %>
	import React, { useEffect } from "react";
	import { TamaguiProvider } from 'tamagui'
	import { SplashScreen, Stack } from "expo-router";
	import { useFonts } from "expo-font";

	import config from '../tamagui.config'

	SplashScreen.preventAutoHideAsync();
<% } else if (props.stylingPackage?.name === "restyle") { %>
  import { ThemeProvider } from '@shopify/restyle';
  import { Stack } from 'expo-router';
  import { theme } from 'theme';
<% } else { %>
	import { Stack } from "expo-router";
<% } %>

<% if (props.analyticsPackage?.name === "vexo-analytics") { %>
  import { vexo } from 'vexo-analytics';

  vexo(process.env.EXPO_PUBLIC_VEXO_API_KEY);
<% } %>

export const unstable_settings = {
	// Ensure that reloading on `/modal` keeps a back button present.
	initialRouteName: "(tabs)",
};

export default function RootLayout() {
    <% if (props.authenticationPackage?.name === "clerk") { %>
      const tokenCache = {
        async getToken(key: string) {
          try {
            const item = await SecureStore.getItemAsync(key)
            if (item) {
              console.log(`${key} was used üîê \n`)
            } else {
              console.log('No values stored under key: ' + key)
            }
            return item
          } catch (error) {
            console.error('SecureStore get item error: ', error)
            await SecureStore.deleteItemAsync(key)
            return null
          }
        },
        async saveToken(key: string, value: string) {
          try {
            return SecureStore.setItemAsync(key, value)
          } catch (err) {
            return
          }
        },
      }

      const clerkPublishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY;
      if (!clerkPublishableKey) {
        throw new Error('Missing EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY, add one in your .env file');
      }
    <% } %>

  	<% if (props.stylingPackage?.name === "tamagui") { %>
    	const [loaded] = useFonts({
      		Inter: require("@tamagui/font-inter/otf/Inter-Medium.otf"),
      		InterBold: require("@tamagui/font-inter/otf/Inter-Bold.otf")
    	});

    	useEffect(() => {
      		if (loaded) {
        		SplashScreen.hideAsync();
      		}
    	}, [loaded]);

    	if (!loaded) return null;
  	<% } %>

  	return (
    	<% if (props.stylingPackage?.name === "tamagui") { %>
    		<TamaguiProvider config={config}>
    	<% } else if (props.stylingPackage?.name === "restyle") { %>
    		<ThemeProvider theme={theme}>
    	<% } %>
      <% if (props.authenticationPackage?.name === "clerk") { %>
          <ClerkProvider tokenCache={tokenCache} publishableKey={clerkPublishableKey}>
            <ClerkLoaded>
      <% } %>
              <Stack>
                <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
                <Stack.Screen name="modal" options={{ presentation: "modal" }} />
              </Stack>
      <% if (props.authenticationPackage?.name === "clerk") { %>
            </ClerkLoaded>
          </ClerkProvider>
      <% } %>
		<% if (props.stylingPackage?.name === "tamagui") { %>
			</TamaguiProvider>
		<% } else if (props.stylingPackage?.name === "restyle") { %>
			</ThemeProvider>
		<% } %>
  	);
}